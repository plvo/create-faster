{{#if (hasModule "mdx")}}
import createMDX from '@next/mdx';
{{/if}}
import type { NextConfig } from 'next';

const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
});

const nextConfig: NextConfig = {
  {{#if (eq repo "turborepo")}}
  transpilePackages: [
    {{#if (hasModule "shadcn")}}
    "@repo/ui",
    {{/if}} 
    {{#if (eq hasContext "orm")}}
    "@repo/db",
    {{/if}}
  ],
  {{/if}}

  reactStrictMode: true,

  eslint: {
    ignoreDuringBuilds: true,
  },

  experimental: {
    optimizePackageImports: [
      'lucide-react',
      'date-fns',
      'date-fns-tz',
      '@dnd-kit/core',
      '@dnd-kit/sortable',
      'react-day-picker',
      'motion',
    ],
  },

  compiler: {
    removeConsole: process.env.NODE_ENV === 'production',
  },

  turbopack: {
    resolveExtensions: [
      '.ts',
      '.tsx',
      '.js',
      '.jsx',
      '.mjs',
      '.cjs',
      {{#if (hasModule "mdx")}}
      '.mdx',
      '.md',
      {{/if}}
    ],
  },
};

{{#if (hasModule "mdx")}}
const withMDX = createMDX({
  extension: /\.(md|mdx)$/,
  options: {
  }
});
{{/if}}

{{#if (hasModule "mdx")}}
export default withMDX(withBundleAnalyzer(nextConfig));
{{else}}
export default withBundleAnalyzer(nextConfig);
{{/if}}