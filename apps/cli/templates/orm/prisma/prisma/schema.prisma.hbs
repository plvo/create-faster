generator client {
  provider = "prisma-client-js"
  {{#if (eq repo "turborepo")}}
  output   = "../generated/prisma"
  {{/if}}
}

datasource db {
  {{#if (eq database "postgres")}}
  provider = "postgresql"
  {{/if}}
  {{#if (eq database "mysql")}}
  provider = "mysql"
  {{/if}}
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  emailVerified Boolean  @default(false) @map("email_verified")
  avatarUrl     String?  @map("avatar_url") @db.Text

  phone         String?
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

{{#if (hasModule "better-auth")}}
  accounts      Account[]
  sessions      Session[]
{{/if}}
  posts         Post[]

  @@map("users")
}

{{#if (hasModule "better-auth")}}
// https://www.better-auth.com/docs/concepts/database#session
model Session {
  id        String   @id
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// https://www.better-auth.com/docs/concepts/database#account
model Account {
  id                      String    @id
  userId                  String    @map("user_id")
  accountId               String    @map("account_id")
  providerId              String    @map("provider_id")
  accessToken             String?   @map("access_token") @db.Text
  refreshToken            String?   @map("refresh_token") @db.Text
  accessTokenExpiresAt    DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt   DateTime? @map("refresh_token_expires_at")
  scope                   String?
  idToken                 String?   @map("id_token") @db.Text
  password                String?
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

// https://www.better-auth.com/docs/concepts/database#verification
model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("verifications")
}
{{/if}}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}
